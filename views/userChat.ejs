<!DOCTYPE html>
<html>
<head>
    <%- include('partials/header') %>
    <style>
        .chat-container {
            height: 65vh;
            overflow-y: auto;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 15px;
            margin-bottom: 20px;
        }

        .message-wrapper {
            display: flex;
            flex-direction: column;
            margin: 10px 0;
            width: 100%;
            background-color: #f8f9fa !important;
        }

        /* Kelas untuk pesan dari pengirim */
        .sent {
            align-items: flex-end;  /* Posisi pesan di kanan */
            text-align: right;
        }

        .sent .message-bubble {
            background: linear-gradient(135deg, #a5d6ff 0%, #3b8ce7 100%);
            color: black;
            border-radius: 15px;
            padding: 10px 15px;
            max-width: 70%; /* Lebar pesan tidak melebihi 70% */
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
            margin-left: auto; /* Mengarahkan pesan ke kanan */
        }

        /* Kelas untuk pesan dari penerima (admin) */
        .received {
            align-items: flex-start; /* Posisi pesan di kiri */
            text-align: left;
        }

        .received .message-bubble {
            background: linear-gradient(135deg, #b8e9ff 0%, #3096d1 100%);
            color: black;
            border-radius: 15px;
            padding: 10px 15px;
            max-width: 70%; /* Lebar pesan tidak melebihi 70% */
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

        .message-sender {
            font-size: 0.8rem;
            margin-bottom: 4px;
            color: #666;
            background-color: #f8f9fa !important;
        }

        .message-time {
            font-size: 0.75rem;
            color: black !important;
            margin-top: 5px;
        }

        /* Custom styles for chat input */
        .chat-input {
            background: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 -2px 10px rgb(255, 255, 255);
        }

        .chat-input form {
            display: flex;
            gap: 10px;
        }

        .chat-input input {
            flex: 1;
            border: 1px solid #E2E8F0;
            border-radius: 15px;
            padding: 12px 20px;
            transition: all 0.3s ease;
        }

        .chat-input button {
            border-radius: 15px;
            padding: 0 25px;
            background: #4dabf7;
            border: none;
            color: white;
            transition: all 0.3s ease;
        }

        .chat-input button:hover {
            background: #3b8ce7;
            transform: translateY(-1px);
        }

        /* Styling for chat header */
        .chat-header {
            background: white;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }

        .chat-header h4 {
            margin: 0;
            color: #2D3748;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .chat-header p {
            margin: 5px 0 0;
            color: #718096;
            font-size: 0.9rem;
        }

        /* Custom scrollbar */
        .chat-container::-webkit-scrollbar {
            width: 8px;
        }

        .chat-container::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }

        .chat-container::-webkit-scrollbar-thumb {
            background: #c1c9d2;
            border-radius: 10px;
        }
    </style>
</head>
<body>
    <%- include('partials/navbar') %>
    
    <div class="container mt-4">
        <div class="chat-header">
            <h4>
                <i class="bi bi-headset"></i>
                Customer Support
            </h4>
            <p>Chat with our admin for assistance</p>
        </div>

        <div class="chat-container" id="chatContainer">
            <% messages.forEach(function(msg) { %>
                <div class="message-wrapper <%= msg.senderId === user.id ? 'sent' : 'received' %>">
                    <div class="message-sender">
                        <% if (msg.senderId === 1) { %>
                            <span class="badge bg-danger">
                                <i class="bi bi-person-gear" style="margin-right: 5px;"></i>
                                Admin
                            </span>
                        <% } else { %>
                            <span class="badge bg-primary">
                                <i class="bi bi-person" style="margin-right: 5px;"></i>
                                You
                            </span>
                        <% } %>
                    </div>
                    <div class="message-bubble">
                        <%= msg.message %>
                        <div class="message-time">
                            <%= new Date(msg.createdAt).toLocaleString('en-US', { 
                                hour: 'numeric', 
                                minute: 'numeric',
                                hour12: true,
                                month: 'short',
                                day: 'numeric'
                            }) %>
                        </div>
                    </div>
                </div>
            <% }); %>
        </div>
        
        <div class="chat-input">
            <form id="messageForm">
                <input type="text" id="messageText" class="form-control" 
                       placeholder="Type your message here..." autocomplete="off">
                <button type="submit" class="btn">
                    <i class="bi bi-send"></i>
                </button>
            </form>
        </div>
    </div>

    <script>
        const messageForm = document.getElementById('messageForm');
        const chatContainer = document.getElementById('chatContainer');
        
        let ws;
    
        function connectWebSocket() {
            ws = new WebSocket('ws://localhost:3001');
            
            ws.onopen = () => {
                console.log('WebSocket Connected');
                ws.send(JSON.stringify({
                    type: 'register',
                    userId: <%= user.id %>
                }));
            };
            
            ws.onmessage = (event) => {
                const data = JSON.parse(event.data);
                console.log('Received message:', data);
                
                if (data.type === 'chat') {
                    appendMessage({
                        senderId: data.senderId,
                        message: data.message,
                        createdAt: data.timestamp
                    }, false);
                }
            };

            ws.onerror = (error) => {
                console.error('WebSocket Error:', error);
            };

            ws.onclose = () => {
                console.log('WebSocket Disconnected');
                // Reconnect after 5 seconds
                setTimeout(connectWebSocket, 5000);
            };
        }

        connectWebSocket();

        function appendMessage(msg, isSent) {
            const messageWrapper = document.createElement('div');
            messageWrapper.className = `message-wrapper ${isSent ? 'sent' : 'received'}`;
            
            messageWrapper.innerHTML = `
                <div class="message-sender">
                    ${msg.senderId === 1 ? 
                        '<span class="badge bg-danger"><i class="bi bi-person-gear" style="margin-right: 5px;"></i>Admin</span>' :
                        '<span class="badge bg-primary"><i class="bi bi-person" style="margin-right: 5px;"></i>You</span>'
                    }
                </div>
                <div class="message-bubble">
                    ${msg.message}
                    <div class="message-time">
                        ${new Date(msg.createdAt).toLocaleString()}
                    </div>
                </div>
            `;
            
            chatContainer.appendChild(messageWrapper);
            scrollToBottom();
        }

        // Auto scroll to bottom
        function scrollToBottom() {
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }
        scrollToBottom();

        messageForm.onsubmit = async (e) => {
            e.preventDefault();
            const messageText = document.getElementById('messageText');
            const message = messageText.value;
            if (!message.trim()) return;

            try {
                const response = await fetch('/api/messages', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        message, 
                        receiverId: 1 
                    })
                });
                
                if (response.ok) {
                    messageText.value = '';
                    
                    // Send through WebSocket if connected
                    if (ws && ws.readyState === WebSocket.OPEN) {
                        ws.send(JSON.stringify({
                            type: 'chat',
                            senderId: <%= user.id %>,
                            receiverId: 1,
                            message: message
                        }));
                    }
                    
                    // Append message locally
                    appendMessage({
                        senderId: <%= user.id %>,
                        message: message,
                        createdAt: new Date()
                    }, true);
                }
            } catch (error) {
                console.error('Error:', error);
            }
        };
    </script>
</body>
</html>